# based on https://github.com/actions/starter-workflows/blob/main/deployments/azure-staticwebapp.yml

name: Deploy tessiverse to Azure Static Web Apps

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

permissions:
  issues: write
  contents: read
  pull-requests: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    env:
      DEPLOY_NAME: ${{ (github.head_ref || github.ref_name) == 'main' && 'production' || (github.head_ref || github.ref_name)  }}  

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: actions/setup-go@v5
        with: 
          go-version: 'stable'

      - uses: actions/setup-node@v4
        with: 
          node-version: '20'

      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}

      - name: Build
        run: |
             npm in --include=dev
             npm run build
             cd tq
             GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -o ../build/server/bin/tq .

      - name: Deploy
        env: 
          SWA_CLI_DEPLOYMENT_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        run: |
            npx swa deploy production --env $DEPLOY_NAME

      - name: Deploy API as function app
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: "tessiverse-api"
          package: "./build/server"
          slot-name: ${{ env.DEPLOY_NAME }}

      - name: Configure frontend and backend
        uses: Azure/cli@v2
        env:
          ENV_NAME: ${{ env.DEPLOY_NAME != 'production' && format('--environment-name {0}',env.DEPLOY_NAME) || '' }}
          SLOT_NAME: ${{ env.DEPLOY_NAME != 'production' && format('/slots/{0}',env.DEPLOY_NAME) || '' }}
        with:
          azcliversion: latest
          inlineScript: |
            # link front end and backend 
            if [ "$(az staticwebapp backends show -n tessiverse -g tessiverse ${{ env.ENV_NAME }})" = "[]" ]; then
              az staticwebapp backends unlink -n tessiverse -g tessiverse ${{ env.ENV_NAME }}
            fi
            az staticwebapp backends link -n tessiverse -g tessiverse  ${{ env.ENV_NAME }} \
              --backend-resource-id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/tessiverse/providers/Microsoft.Web/sites/tessiverse-api${{ env.SLOT_NAME }}" --backend-region canadaeast
            
            # configure backend using production config options
            if [ "${{ env.DEPLOY_NAME }}" != "production" ]; then 
              az functionapp config appsettings list -n tessiverse-api -g tessiverse --query '[?!slotSetting]' > settings.json
              az functionapp config appsettings set -n tessiverse-api -g tessiverse -s ${{ env.DEPLOY_NAME }} --settings @settings.json
            fi